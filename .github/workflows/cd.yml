name: Continuous Delivery

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update environment files on server (langsung sed di workflow)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd ./hris-backend
            sed -i "s/^APP_NAME=.*/APP_NAME=HRIS/" .env
            sed -i "s/^APP_ENV=.*/APP_ENV=production/" .env
            sed -i "s/^APP_DEBUG=.*/APP_DEBUG=false/" .env
            sed -i "s|^APP_URL=.*|APP_URL=${{ secrets.APP_URL }}|" .env
            sed -i "s/^DB_CONNECTION=.*/DB_CONNECTION=pgsql/" .env
            sed -i "s/^DB_HOST=.*/DB_HOST=postgres/" .env
            sed -i "s/^DB_PORT=.*/DB_PORT=5432/" .env
            sed -i "s/^DB_DATABASE=.*/DB_DATABASE=${{ secrets.DB_DATABASE }}/" .env
            sed -i "s/^DB_USERNAME=.*/DB_USERNAME=${{ secrets.DB_USERNAME }}/" .env
            sed -i "s/^DB_PASSWORD=.*/DB_PASSWORD=${{ secrets.DB_PASSWORD }}/" .env
            sed -i "s/^CACHE_STORE=.*/CACHE_STORE=database/" .env
            sed -i "s/^SESSION_DRIVER=.*/SESSION_DRIVER=database/" .env
            sed -i "s/^QUEUE_CONNECTION=.*/QUEUE_CONNECTION=database/" .env
            sed -i "s/^LOG_LEVEL=.*/LOG_LEVEL=error/" .env
            printf '%s\n' \
              "POSTGRES_DB=${{ secrets.DB_DATABASE }}" \
              "POSTGRES_USER=${{ secrets.DB_USERNAME }}" \
              "POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}" \
              "POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C" \
              > .env.postgres

      - name: Deploy containers and migrate
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd ./hris-backend

            git checkout main

            if ! git pull origin main; then
              git pull --rebase origin main
            fi

            docker rm -f hris-api
            docker rmi -f hris-api:latest || true
            docker builder prune -f

            docker compose build --no-cache
            docker compose up -d

            PG_USER=$(grep '^POSTGRES_USER=' .env.postgres | cut -d'=' -f2)
            PG_DB=$(grep '^POSTGRES_DB=' .env.postgres | cut -d'=' -f2)

            timeout=60

            while [ $timeout -gt 0 ]; do
              if docker compose exec postgres pg_isready -U $PG_USER -d $PG_DB > /dev/null 2>&1; then
                break
              fi
              sleep 5
              timeout=$((timeout-5))
            done

            [ $timeout -gt 0 ] || { docker compose logs postgres --tail=20; exit 1; }

            if ! grep -q "^APP_KEY=base64:" .env; then
              docker compose exec api php artisan key:generate --force
            fi

            if docker compose exec api php artisan config:cache; then
              echo "Config cache sukses"
            else
              echo "Config cache gagal"
              docker compose logs api --tail=20
              exit 1
            fi

            if docker compose exec api php artisan route:cache; then
              echo "Route cache sukses"
            else
              echo "Route cache gagal"
              docker compose logs api --tail=20
              exit 1
            fi

            if docker compose exec api php artisan migrate --force; then
              echo "Migrate sukses"
            else
              echo "Migrate gagal"
              docker compose logs api --tail=20
              exit 1
            fi

            docker compose ps
